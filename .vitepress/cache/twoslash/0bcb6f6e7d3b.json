{"code":"import type { Expand } from \"flex-tools/types\";\ntype Complex = { a: string } & { b: number };\ntype Expanded = Expand<Complex>; // { a: string; b: number }\n","nodes":[{"type":"hover","text":"(alias) type Expand<T> = T extends infer O ? { [K in keyof O]: O[K]; } : never\nimport Expand","docs":"将类型 T 展开为其所有属性的联合类型\n用于展开复杂的类型定义,使其更易读和理解","tags":[["template","T - 需要展开的类型"],["returns","展开后的类型,包含原类型的所有属性"],["example","type Complex = { a: string } & { b: number };\ntype Expanded = Expand<Complex>; // { a: string; b: number }"]],"start":14,"length":6,"target":"Expand","line":0,"character":14},{"type":"hover","text":"type Complex = {\n    a: string;\n} & {\n    b: number;\n}","start":53,"length":7,"target":"Complex","line":1,"character":5},{"type":"hover","text":"(property) a: string","start":65,"length":1,"target":"a","line":1,"character":17},{"type":"hover","text":"(property) b: number","start":81,"length":1,"target":"b","line":1,"character":33},{"type":"hover","text":"type Expanded = {\n    a: string;\n    b: number;\n}","start":99,"length":8,"target":"Expanded","line":2,"character":5},{"type":"query","text":"type Expanded = {\n    a: string;\n    b: number;\n}","start":99,"length":8,"target":"Expanded","line":2,"character":5},{"type":"hover","text":"(alias) type Expand<T> = T extends infer O ? { [K in keyof O]: O[K]; } : never\nimport Expand","docs":"将类型 T 展开为其所有属性的联合类型\n用于展开复杂的类型定义,使其更易读和理解","tags":[["template","T - 需要展开的类型"],["returns","展开后的类型,包含原类型的所有属性"],["example","type Complex = { a: string } & { b: number };\ntype Expanded = Expand<Complex>; // { a: string; b: number }"]],"start":110,"length":6,"target":"Expand","line":2,"character":16},{"type":"hover","text":"type Complex = {\n    a: string;\n} & {\n    b: number;\n}","start":117,"length":7,"target":"Complex","line":2,"character":23}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"E:/Work/Code/sources/flex-tools/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[155,163]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"E:/Work/Code/sources/flex-tools/index.ts","content":"import type { Expand } from \"flex-tools/types\";\ntype Complex = { a: string } & { b: number };\ntype Expanded = Expand<Complex>; // { a: string; b: number }\n//   ^?","extension":"ts","supportLsp":true}],"positionQueries":[99],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"type Expanded = {\n    a: string;\n    b: number;\n}","start":99,"length":8,"target":"Expanded","line":2,"character":5}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) type Expand<T> = T extends infer O ? { [K in keyof O]: O[K]; } : never\nimport Expand","docs":"将类型 T 展开为其所有属性的联合类型\n用于展开复杂的类型定义,使其更易读和理解","tags":[["template","T - 需要展开的类型"],["returns","展开后的类型,包含原类型的所有属性"],["example","type Complex = { a: string } & { b: number };\ntype Expanded = Expand<Complex>; // { a: string; b: number }"]],"start":14,"length":6,"target":"Expand","line":0,"character":14},{"type":"hover","text":"type Complex = {\n    a: string;\n} & {\n    b: number;\n}","start":53,"length":7,"target":"Complex","line":1,"character":5},{"type":"hover","text":"(property) a: string","start":65,"length":1,"target":"a","line":1,"character":17},{"type":"hover","text":"(property) b: number","start":81,"length":1,"target":"b","line":1,"character":33},{"type":"hover","text":"type Expanded = {\n    a: string;\n    b: number;\n}","start":99,"length":8,"target":"Expanded","line":2,"character":5},{"type":"hover","text":"(alias) type Expand<T> = T extends infer O ? { [K in keyof O]: O[K]; } : never\nimport Expand","docs":"将类型 T 展开为其所有属性的联合类型\n用于展开复杂的类型定义,使其更易读和理解","tags":[["template","T - 需要展开的类型"],["returns","展开后的类型,包含原类型的所有属性"],["example","type Complex = { a: string } & { b: number };\ntype Expanded = Expand<Complex>; // { a: string; b: number }"]],"start":110,"length":6,"target":"Expand","line":2,"character":16},{"type":"hover","text":"type Complex = {\n    a: string;\n} & {\n    b: number;\n}","start":117,"length":7,"target":"Complex","line":2,"character":23}],"tags":[]}